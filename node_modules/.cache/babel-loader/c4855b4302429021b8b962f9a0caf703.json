{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getRTL, composeRenderFunction } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\n\nvar GroupHeaderBase =\n/** @class */\nfunction (_super) {\n  __extends(GroupHeaderBase, _super);\n\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onToggleCollapse = function (ev) {\n      var _a = _this.props,\n          group = _a.group,\n          onToggleCollapse = _a.onToggleCollapse,\n          isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n\n    _this._onToggleSelectGroupClick = function (ev) {\n      var _a = _this.props,\n          onToggleSelectGroup = _a.onToggleSelectGroup,\n          group = _a.group;\n\n      if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n          group = _a.group,\n          onGroupHeaderClick = _a.onGroupHeaderClick,\n          onToggleSelectGroup = _a.onToggleSelectGroup;\n\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      } else if (onToggleSelectGroup) {\n        onToggleSelectGroup(group);\n      }\n    };\n\n    _this._onRenderTitle = function (props) {\n      var group = props.group;\n\n      if (!group) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: _this._classNames.title\n      }, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  } // tslint:disable-next-line function-name\n\n\n  GroupHeaderBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.group) {\n      var newCollapsed = newProps.group.isCollapsed;\n      var isGroupLoading = newProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n      this.setState({\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n  };\n\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        group = _a.group,\n        groupLevel = _a.groupLevel,\n        viewport = _a.viewport,\n        selectionMode = _a.selectionMode,\n        loadingText = _a.loadingText,\n        // tslint:disable-next-line:deprecation\n    _b = _a.isSelected,\n        // tslint:disable-next-line:deprecation\n    isSelected = _b === void 0 ? false : _b,\n        _c = _a.selected,\n        selected = _c === void 0 ? false : _c,\n        indentWidth = _a.indentWidth,\n        _d = _a.onRenderTitle,\n        onRenderTitle = _d === void 0 ? this._onRenderTitle : _d,\n        onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n        _e = _a.isCollapsedGroupSelectVisible,\n        isCollapsedGroupSelectVisible = _e === void 0 ? true : _e,\n        expandButtonProps = _a.expandButtonProps,\n        expandButtonIcon = _a.expandButtonIcon,\n        selectAllButtonProps = _a.selectAllButtonProps,\n        theme = _a.theme,\n        styles = _a.styles,\n        className = _a.className,\n        groupedListId = _a.groupedListId,\n        compact = _a.compact,\n        ariaPosInSet = _a.ariaPosInSet,\n        ariaSetSize = _a.ariaSetSize,\n        useFastIcons = _a.useFastIcons;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _f = this.state,\n        isCollapsed = _f.isCollapsed,\n        isLoadingVisible = _f.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      onClick: this._onHeaderClick,\n      \"aria-expanded\": !group.isCollapsed,\n      \"aria-label\": group.ariaLabel || group.name,\n      \"aria-level\": groupLevel !== undefined ? groupLevel + 1 : undefined,\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"data-is-focusable\": true\n    }, React.createElement(FocusZone, {\n      className: this._classNames.groupHeaderContainer,\n      direction: FocusZoneDirection.horizontal\n    }, isSelectionCheckVisible ? React.createElement(\"button\", __assign({\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      \"aria-checked\": currentlySelected,\n      \"data-selection-toggle\": true,\n      onClick: this._onToggleSelectGroupClick\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox)) : selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"button\", __assign({\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleCollapse,\n      \"aria-expanded\": !group.isCollapsed,\n      \"aria-controls\": group && !group.isCollapsed ? groupedListId : undefined\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    })), onRenderTitle(this.props, this._onRenderTitle), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\n\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"sources":["components/GroupedList/GroupHeader.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { classNamesFunction, getRTL, composeRenderFunction } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/index';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IGroupHeaderProps): void {\n    if (newProps.group) {\n      const newCollapsed = newProps.group.isCollapsed;\n      const isGroupLoading = newProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(newProps.group);\n\n      this.setState({\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      });\n    }\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel,\n      viewport,\n      selectionMode,\n      loadingText,\n      // tslint:disable-next-line:deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      groupedListId,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        aria-expanded={!group.isCollapsed}\n        aria-label={group.ariaLabel || group.name}\n        aria-level={groupLevel !== undefined ? groupLevel + 1 : undefined}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        data-is-focusable={true}\n      >\n        <FocusZone className={this._classNames.groupHeaderContainer} direction={FocusZoneDirection.horizontal}>\n          {isSelectionCheckVisible ? (\n            <button\n              type=\"button\"\n              className={this._classNames.check}\n              role=\"checkbox\"\n              aria-checked={currentlySelected}\n              data-selection-toggle={true}\n              onClick={this._onToggleSelectGroupClick}\n              {...selectAllButtonProps}\n            >\n              {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n            </button>\n          ) : (\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={indentWidth} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon}>\n            <Icon iconName=\"Tag\" />\n          </div>\n          <button\n            type=\"button\"\n            className={this._classNames.expand}\n            onClick={this._onToggleCollapse}\n            aria-expanded={!group.isCollapsed}\n            aria-controls={group && !group.isCollapsed ? groupedListId : undefined}\n            {...expandButtonProps}\n          >\n            <Icon\n              className={this._classNames.expandIsCollapsed}\n              iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n            />\n          </button>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </FocusZone>\n      </div>\n    );\n  }\n\n  private _onToggleCollapse = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}