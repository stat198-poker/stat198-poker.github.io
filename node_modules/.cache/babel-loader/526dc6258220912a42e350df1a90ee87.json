{"ast":null,"code":"import { __assign, __decorate, __extends, __spreadArrays } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles'; // For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\n\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\nvar getClassNames = classNamesFunction();\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\nvar DetailsListBase =\n/** @class */\nfunction (_super) {\n  __extends(DetailsListBase, _super);\n\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n    _this._sumColumnWidths = memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n\n    _this._onRenderDetailsHeader = function (detailsHeaderProps, defaultRender) {\n      return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n    };\n\n    _this._onRenderDetailsFooter = function (detailsFooterProps, defaultRender) {\n      return null;\n    };\n\n    _this._onRenderListCell = function (nestingDepth) {\n      return function (item, itemIndex) {\n        return _this._onRenderCell(nestingDepth, item, itemIndex);\n      };\n    };\n\n    _this._onRenderCell = function (nestingDepth, item, index) {\n      var _a = _this.props,\n          compact = _a.compact,\n          dragDropEvents = _a.dragDropEvents,\n          eventsToRegister = _a.rowElementEventMap,\n          onRenderMissingItem = _a.onRenderMissingItem,\n          onRenderItemColumn = _a.onRenderItemColumn,\n          getCellValueKey = _a.getCellValueKey,\n          _b = _a.selectionMode,\n          selectionMode = _b === void 0 ? _this._selection.mode : _b,\n          viewport = _a.viewport,\n          checkboxVisibility = _a.checkboxVisibility,\n          getRowAriaLabel = _a.getRowAriaLabel,\n          getRowAriaDescribedBy = _a.getRowAriaDescribedBy,\n          checkButtonAriaLabel = _a.checkButtonAriaLabel,\n          checkboxCellClassName = _a.checkboxCellClassName,\n          groupProps = _a.groupProps,\n          useReducedRowRenderer = _a.useReducedRowRenderer,\n          indentWidth = _a.indentWidth,\n          _c = _a.cellStyleProps,\n          cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n          onRenderCheckbox = _a.onRenderCheckbox,\n          enableUpdateAnimations = _a.enableUpdateAnimations,\n          useFastIcons = _a.useFastIcons;\n      var onRenderRow = _this.props.onRenderRow ? composeRenderFunction(_this.props.onRenderRow, _this._onRenderRow) : _this._onRenderRow;\n      var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n      var selection = _this._selection;\n      var dragDropHelper = _this._dragDropHelper;\n      var columns = _this.state.adjustedColumns;\n      var rowProps = {\n        item: item,\n        itemIndex: index,\n        compact: compact,\n        columns: columns,\n        groupNestingDepth: nestingDepth,\n        selectionMode: selectionMode,\n        selection: selection,\n        onDidMount: _this._onRowDidMount,\n        onWillUnmount: _this._onRowWillUnmount,\n        onRenderItemColumn: onRenderItemColumn,\n        getCellValueKey: getCellValueKey,\n        eventsToRegister: eventsToRegister,\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        collapseAllVisibility: collapseAllVisibility,\n        getRowAriaLabel: getRowAriaLabel,\n        getRowAriaDescribedBy: getRowAriaDescribedBy,\n        checkButtonAriaLabel: checkButtonAriaLabel,\n        checkboxCellClassName: checkboxCellClassName,\n        useReducedRowRenderer: useReducedRowRenderer,\n        indentWidth: indentWidth,\n        cellStyleProps: cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations: enableUpdateAnimations,\n        rowWidth: _this._sumColumnWidths(columns),\n        useFastIcons: useFastIcons\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return onRenderRow(rowProps);\n    };\n\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n\n    _this._onHeaderKeyDown = function (ev) {\n      if (ev.which === KeyCodes.down) {\n        if (_this._focusZone.current && _this._focusZone.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (_this._selection.getSelectedIndices().length === 0) {\n            _this._selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n\n    _this._onContentKeyDown = function (ev) {\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (_this._header.current && _this._header.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n\n      _this._setFocusToRowIfPending(row);\n\n      var onRowDidMount = _this.props.onRowDidMount;\n\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n          item = _a.item,\n          itemIndex = _a.itemIndex;\n\n      var itemKey = _this._getItemKey(item, itemIndex);\n\n      delete _this._activeRows[itemKey];\n\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n\n    _this._onColumnDragEnd = function (props, event) {\n      var columnReorderOptions = _this.props.columnReorderOptions;\n      var finalDropLocation = ColumnDragEndLocation.outside;\n\n      if (columnReorderOptions && columnReorderOptions.onDragEnd) {\n        if (props.dropLocation && props.dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = props.dropLocation;\n        } else if (_this._root.current) {\n          var clientRect = _this._root.current.getBoundingClientRect();\n\n          if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n\n        columnReorderOptions.onDragEnd(finalDropLocation);\n      }\n    };\n\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n      _this._adjustColumns(_this.props, true, resizingColumnIndex);\n\n      _this.setState({\n        version: {}\n      });\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n\n\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n\n\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n          items = _a.items,\n          onActiveItemChanged = _a.onActiveItemChanged;\n\n      if (!el) {\n        return;\n      } // Check and assign index only if the event was raised from any DetailsRow element\n\n\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n\n    _this.isRightArrow = function (event) {\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);\n    };\n\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props),\n      isSizing: false,\n      isDropping: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {}\n    };\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    var item = this.props.items[index];\n\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      var itemKey = this._getItemKey(item, index);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n\n    return 0;\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n\n    this._async.dispose();\n  };\n\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n\n        var row = this._activeRows[itemKey];\n\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n\n      var row = this._activeRows[itemKey];\n\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }; // tslint:disable-next-line function-name\n\n\n  DetailsListBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    var _a = this.props,\n        checkboxVisibility = _a.checkboxVisibility,\n        items = _a.items,\n        setKey = _a.setKey,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        columns = _a.columns,\n        viewport = _a.viewport,\n        compact = _a.compact,\n        dragDropEvents = _a.dragDropEvents;\n    var _c = (this.props.groupProps || {}).isAllGroupsCollapsed,\n        isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n    var newViewportWidth = newProps.viewport && newProps.viewport.width || 0;\n    var oldViewportWidth = viewport && viewport.width || 0;\n    var shouldResetSelection = newProps.setKey !== setKey || newProps.setKey === undefined;\n    var shouldForceUpdates = false;\n\n    if (newProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = newProps.initialFocusedIndex; // reset focusedItemIndex when setKey changes\n\n      this.setState({\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1\n      });\n    }\n\n    if (!this.props.disableSelectionZone && newProps.items !== items) {\n      this._selection.setItems(newProps.items, shouldResetSelection);\n    }\n\n    if (newProps.checkboxVisibility !== checkboxVisibility || newProps.columns !== columns || newViewportWidth !== oldViewportWidth || newProps.compact !== compact) {\n      shouldForceUpdates = true;\n    }\n\n    this._adjustColumns(newProps, true);\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (isAllGroupsCollapsed === undefined && newProps.groupProps && newProps.groupProps.isAllGroupsCollapsed !== undefined) {\n      this.setState({\n        isCollapsed: newProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !newProps.groupProps.isAllGroupsCollapsed\n      });\n    }\n\n    if (newProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = newProps.dragDropEvents ? new DragDropHelper({\n        selection: this._selection,\n        minimumPixelsForDrag: newProps.minimumPixelsForDrag\n      }) : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this.setState({\n        version: {}\n      });\n    }\n  };\n\n  DetailsListBase.prototype.render = function () {\n    var _a = this.props,\n        ariaLabelForListHeader = _a.ariaLabelForListHeader,\n        ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n        ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n        className = _a.className,\n        checkboxVisibility = _a.checkboxVisibility,\n        compact = _a.compact,\n        constrainMode = _a.constrainMode,\n        dragDropEvents = _a.dragDropEvents,\n        groups = _a.groups,\n        groupProps = _a.groupProps,\n        indentWidth = _a.indentWidth,\n        items = _a.items,\n        isPlaceholderData = _a.isPlaceholderData,\n        isHeaderVisible = _a.isHeaderVisible,\n        layoutMode = _a.layoutMode,\n        onItemInvoked = _a.onItemInvoked,\n        onItemContextMenu = _a.onItemContextMenu,\n        onColumnHeaderClick = _a.onColumnHeaderClick,\n        onColumnHeaderContextMenu = _a.onColumnHeaderContextMenu,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        selectionPreservedOnEmptyClick = _a.selectionPreservedOnEmptyClick,\n        selectionZoneProps = _a.selectionZoneProps,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelForGrid = _a.ariaLabelForGrid,\n        rowElementEventMap = _a.rowElementEventMap,\n        _c = _a.shouldApplyApplicationRole,\n        shouldApplyApplicationRole = _c === void 0 ? false : _c,\n        getKey = _a.getKey,\n        listProps = _a.listProps,\n        usePageCache = _a.usePageCache,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        viewport = _a.viewport,\n        minimumPixelsForDrag = _a.minimumPixelsForDrag,\n        getGroupHeight = _a.getGroupHeight,\n        styles = _a.styles,\n        theme = _a.theme,\n        _d = _a.cellStyleProps,\n        cellStyleProps = _d === void 0 ? DEFAULT_CELL_STYLE_PROPS : _d,\n        onRenderCheckbox = _a.onRenderCheckbox,\n        useFastIcons = _a.useFastIcons;\n    var _e = this.state,\n        adjustedColumns = _e.adjustedColumns,\n        isCollapsed = _e.isCollapsed,\n        isSizing = _e.isSizing,\n        isSomeGroupExpanded = _e.isSomeGroupExpanded;\n\n    var _f = this,\n        selection = _f._selection,\n        dragDropHelper = _f._dragDropHelper;\n\n    var groupNestingDepth = this._getGroupNestingDepth();\n\n    var additionalListProps = __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: this.state.version\n    }, listProps);\n\n    var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n\n    if (selectionMode === SelectionMode.single) {\n      selectAllVisibility = SelectAllVisibility.hidden;\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n      var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n\n      if (isCollapsedGroupSelectVisible === undefined) {\n        isCollapsedGroupSelectVisible = true;\n      }\n\n      var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n      selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n    }\n\n    if (checkboxVisibility === CheckboxVisibility.hidden) {\n      selectAllVisibility = SelectAllVisibility.none;\n    }\n\n    var _g = this.props,\n        _h = _g.onRenderDetailsHeader,\n        onRenderDetailsHeader = _h === void 0 ? this._onRenderDetailsHeader : _h,\n        _j = _g.onRenderDetailsFooter,\n        onRenderDetailsFooter = _j === void 0 ? this._onRenderDetailsFooter : _j;\n\n    var detailsFooterProps = this._getDetailsFooterProps();\n\n    var columnReorderProps = this._getColumnReorderProps();\n\n    var rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n    var list = groups ? React.createElement(GroupedList, {\n      componentRef: this._groupedList,\n      groups: groups,\n      groupProps: groupProps ? this._getGroupProps(groupProps) : undefined,\n      items: items,\n      onRenderCell: this._onRenderCell,\n      selection: selection,\n      selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      eventsToRegister: rowElementEventMap,\n      listProps: additionalListProps,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      getGroupHeight: getGroupHeight,\n      compact: compact\n    }) : React.createElement(List, __assign({\n      ref: this._list,\n      role: \"presentation\",\n      items: items,\n      onRenderCell: this._onRenderListCell(0),\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize\n    }, additionalListProps));\n    return (// If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n      // with JAWS.\n      React.createElement(\"div\", __assign({\n        ref: this._root,\n        className: classNames.root,\n        \"data-automationid\": \"DetailsList\",\n        \"data-is-scrollable\": \"false\",\n        \"aria-label\": ariaLabel\n      }, shouldApplyApplicationRole ? {\n        role: 'application'\n      } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n        role: \"grid\",\n        \"aria-label\": ariaLabelForGrid,\n        \"aria-rowcount\": isPlaceholderData ? -1 : rowCount,\n        \"aria-colcount\": (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0),\n        \"aria-readonly\": \"true\",\n        \"aria-busy\": isPlaceholderData\n      }, React.createElement(\"div\", {\n        onKeyDown: this._onHeaderKeyDown,\n        role: \"presentation\",\n        className: classNames.headerWrapper\n      }, isHeaderVisible && onRenderDetailsHeader({\n        componentRef: this._header,\n        selectionMode: selectionMode,\n        layoutMode: layoutMode,\n        selection: selection,\n        columns: adjustedColumns,\n        onColumnClick: onColumnHeaderClick,\n        onColumnContextMenu: onColumnHeaderContextMenu,\n        onColumnResized: this._onColumnResized,\n        onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n        onColumnAutoResized: this._onColumnAutoResized,\n        groupNestingDepth: groupNestingDepth,\n        isAllCollapsed: isCollapsed,\n        onToggleCollapseAll: this._onToggleCollapse,\n        ariaLabel: ariaLabelForListHeader,\n        ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n        ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n        selectAllVisibility: selectAllVisibility,\n        collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n        viewport: viewport,\n        columnReorderProps: columnReorderProps,\n        minimumPixelsForDrag: minimumPixelsForDrag,\n        cellStyleProps: cellStyleProps,\n        checkboxVisibility: checkboxVisibility,\n        indentWidth: indentWidth,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        rowWidth: this._sumColumnWidths(this.state.adjustedColumns),\n        useFastIcons: useFastIcons\n      }, this._onRenderDetailsHeader)), React.createElement(\"div\", {\n        onKeyDown: this._onContentKeyDown,\n        role: \"presentation\",\n        className: classNames.contentWrapper\n      }, React.createElement(FocusZone, {\n        componentRef: this._focusZone,\n        className: classNames.focusZone,\n        direction: FocusZoneDirection.vertical,\n        shouldEnterInnerZone: this.isRightArrow,\n        onActiveElementChanged: this._onActiveRowChanged,\n        onBlur: this._onBlur\n      }, !this.props.disableSelectionZone ? React.createElement(SelectionZone, __assign({\n        ref: this._selectionZone,\n        selection: selection,\n        selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n        selectionMode: selectionMode,\n        onItemInvoked: onItemInvoked,\n        onItemContextMenu: onItemContextMenu,\n        enterModalOnTouch: this.props.enterModalSelectionOnTouch\n      }, selectionZoneProps || {}), list) : list)), onRenderDetailsFooter(__assign({}, detailsFooterProps), this._onRenderDetailsFooter)))\n    );\n  };\n\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n\n    this._forceListUpdates();\n  };\n\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  };\n\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n\n      delete this._initialFocusedIndex;\n    }\n  };\n\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n\n  DetailsListBase.prototype._adjustColumns = function (newProps, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, forceUpdate, resizingColumnIndex);\n\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    if (adjustedColumns) {\n      this.setState({\n        adjustedColumns: adjustedColumns,\n        lastWidth: viewportWidth\n      }, this._notifyColumnsResized);\n    }\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n\n\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n\n    var newItems = newProps.items,\n        layoutMode = newProps.layoutMode,\n        selectionMode = newProps.selectionMode,\n        viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = this.state ? this.state.lastWidth : -1;\n    var lastSelectionMode = this.state ? this.state.lastSelectionMode : undefined;\n\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns); // Preserve adjusted column calculated widths.\n\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(newColumns, viewportWidth, newProps, resizingColumnIndex);\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n\n\n  DetailsListBase.prototype._getFixedColumns = function (newColumns) {\n    var _this = this;\n\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  };\n\n  DetailsListBase.prototype._getJustifiedColumnsAfterResize = function (newColumns, viewportWidth, props, resizingColumnIndex) {\n    var _this = this;\n\n    var fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(function (column) {\n      return column.calculatedWidth = _this._getColumnOverride(column.key).currentWidth;\n    });\n    var fixedWidth = fixedColumns.reduce(function (total, column, i) {\n      return total + getPaddedWidth(column, i === 0, props);\n    }, 0);\n    var remainingColumns = newColumns.slice(resizingColumnIndex);\n    var remainingWidth = viewportWidth - fixedWidth;\n    return __spreadArrays(fixedColumns, this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex));\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n\n\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props, firstIndex) {\n    var _this = this;\n\n    var _a = props.selectionMode,\n        selectionMode = _a === void 0 ? this._selection.mode : _a,\n        checkboxVisibility = props.checkboxVisibility;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var newColumn = __assign(__assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      }), _this._columnOverrides[column.key]);\n\n      var isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n      return newColumn;\n    });\n    var lastIndex = adjustedColumns.length - 1; // Shrink or remove collapsable columns.\n\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth; // tslint:disable-next-line:deprecation\n\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n\n      lastIndex--;\n    } // Then expand columns starting at the beginning, until we've filled the width.\n\n\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  };\n\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  };\n\n  DetailsListBase.prototype._getDetailsFooterProps = function () {\n    var columns = this.state.adjustedColumns;\n    var _a = this.props,\n        viewport = _a.viewport,\n        checkboxVisibility = _a.checkboxVisibility,\n        indentWidth = _a.indentWidth,\n        _b = _a.cellStyleProps,\n        cellStyleProps = _b === void 0 ? DEFAULT_CELL_STYLE_PROPS : _b,\n        _c = _a.selectionMode,\n        selectionMode = _c === void 0 ? this._selection.mode : _c;\n    return {\n      columns: columns,\n      groupNestingDepth: this._getGroupNestingDepth(),\n      selection: this._selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  };\n\n  DetailsListBase.prototype._getColumnReorderProps = function () {\n    var columnReorderOptions = this.props.columnReorderOptions;\n\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: this._onColumnDragEnd\n      });\n    }\n  };\n\n  DetailsListBase.prototype._getGroupProps = function (detailsGroupProps) {\n    var _this = this;\n\n    var onRenderDetailsGroupFooter = detailsGroupProps.onRenderFooter,\n        onRenderDetailsGroupHeader = detailsGroupProps.onRenderHeader;\n    var columns = this.state.adjustedColumns;\n    var _a = this.props,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? this._selection.mode : _b,\n        viewport = _a.viewport,\n        _c = _a.cellStyleProps,\n        cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n        checkboxVisibility = _a.checkboxVisibility,\n        indentWidth = _a.indentWidth;\n\n    var groupNestingDepth = this._getGroupNestingDepth();\n\n    var onRenderFooter = onRenderDetailsGroupFooter ? function (props, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, props), {\n        columns: columns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: _this._selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n    var onRenderHeader = onRenderDetailsGroupHeader ? function (props, defaultRender) {\n      return onRenderDetailsGroupHeader(__assign(__assign({}, props), {\n        columns: columns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: _this._selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n    return __assign(__assign({}, detailsGroupProps), {\n      onRenderFooter: onRenderFooter,\n      onRenderHeader: onRenderHeader\n    });\n  };\n\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\n\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline) {\n  var columns = [];\n\n  if (items && items.length) {\n    var firstItem = items[0];\n\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column, isFirst, props) {\n  var _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}","map":{"version":3,"sources":["components/DetailsList/DetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  IDetailsGroupRenderProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../utilities/selection/index';\n\nimport { DragDropHelper } from '../../utilities/dragdrop/DragDropHelper';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isDropping?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  private _sumColumnWidths = memoizeFunction((columns: IColumn[]) => {\n    let totalWidth: number = 0;\n\n    columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n    return totalWidth;\n  });\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props),\n      isSizing: false,\n      isDropping: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: IDetailsListProps): void {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (newProps.viewport && newProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = newProps.setKey !== setKey || newProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (newProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = newProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      this.setState({\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      });\n    }\n\n    if (!this.props.disableSelectionZone && newProps.items !== items) {\n      this._selection.setItems(newProps.items, shouldResetSelection);\n    }\n\n    if (\n      newProps.checkboxVisibility !== checkboxVisibility ||\n      newProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      newProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    this._adjustColumns(newProps, true);\n\n    if (newProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      newProps.groupProps &&\n      newProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      this.setState({\n        isCollapsed: newProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !newProps.groupProps.isAllGroupsCollapsed,\n      });\n    }\n\n    if (newProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = newProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: newProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      this.setState({\n        version: {},\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      ariaLabelForListHeader,\n      ariaLabelForSelectAllCheckbox,\n      ariaLabelForSelectionColumn,\n      className,\n      checkboxVisibility,\n      compact,\n      constrainMode,\n      dragDropEvents,\n      groups,\n      groupProps,\n      indentWidth,\n      items,\n      isPlaceholderData,\n      isHeaderVisible,\n      layoutMode,\n      onItemInvoked,\n      onItemContextMenu,\n      onColumnHeaderClick,\n      onColumnHeaderContextMenu,\n      selectionMode = this._selection.mode,\n      selectionPreservedOnEmptyClick,\n      selectionZoneProps,\n      ariaLabel,\n      ariaLabelForGrid,\n      rowElementEventMap,\n      shouldApplyApplicationRole = false,\n      getKey,\n      listProps,\n      usePageCache,\n      onShouldVirtualize,\n      viewport,\n      minimumPixelsForDrag,\n      getGroupHeight,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      onRenderCheckbox,\n      useFastIcons,\n    } = this.props;\n    const { adjustedColumns, isCollapsed, isSizing, isSomeGroupExpanded } = this.state;\n    const { _selection: selection, _dragDropHelper: dragDropHelper } = this;\n    const groupNestingDepth = this._getGroupNestingDepth();\n    const additionalListProps: IListProps = {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version: this.state.version,\n      ...listProps,\n    };\n    let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n    if (selectionMode === SelectionMode.single) {\n      selectAllVisibility = SelectAllVisibility.hidden;\n    }\n    if (selectionMode === SelectionMode.multiple) {\n      // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n      let isCollapsedGroupSelectVisible =\n        groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n      if (isCollapsedGroupSelectVisible === undefined) {\n        isCollapsedGroupSelectVisible = true;\n      }\n      const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n      selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n    }\n\n    if (checkboxVisibility === CheckboxVisibility.hidden) {\n      selectAllVisibility = SelectAllVisibility.none;\n    }\n\n    const {\n      onRenderDetailsHeader = this._onRenderDetailsHeader,\n      onRenderDetailsFooter = this._onRenderDetailsFooter,\n    } = this.props;\n\n    const detailsFooterProps = this._getDetailsFooterProps();\n    const columnReorderProps = this._getColumnReorderProps();\n\n    const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n\n    const list = groups ? (\n      <GroupedList\n        componentRef={this._groupedList}\n        groups={groups}\n        groupProps={groupProps ? this._getGroupProps(groupProps) : undefined}\n        items={items}\n        onRenderCell={this._onRenderCell}\n        selection={selection}\n        selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={rowElementEventMap}\n        listProps={additionalListProps}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        getGroupHeight={getGroupHeight}\n        compact={compact}\n      />\n    ) : (\n      <List\n        ref={this._list}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={this._onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    );\n\n    return (\n      // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n      // with JAWS.\n      <div\n        ref={this._root}\n        className={classNames.root}\n        data-automationid=\"DetailsList\"\n        data-is-scrollable=\"false\"\n        aria-label={ariaLabel}\n        {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n      >\n        <FocusRects />\n        <div\n          role=\"grid\"\n          aria-label={ariaLabelForGrid}\n          aria-rowcount={isPlaceholderData ? -1 : rowCount}\n          aria-colcount={\n            (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0)\n          }\n          aria-readonly=\"true\"\n          aria-busy={isPlaceholderData}\n        >\n          <div onKeyDown={this._onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n            {isHeaderVisible &&\n              onRenderDetailsHeader(\n                {\n                  componentRef: this._header,\n                  selectionMode: selectionMode,\n                  layoutMode: layoutMode!,\n                  selection: selection,\n                  columns: adjustedColumns,\n                  onColumnClick: onColumnHeaderClick,\n                  onColumnContextMenu: onColumnHeaderContextMenu,\n                  onColumnResized: this._onColumnResized,\n                  onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n                  onColumnAutoResized: this._onColumnAutoResized,\n                  groupNestingDepth: groupNestingDepth,\n                  isAllCollapsed: isCollapsed,\n                  onToggleCollapseAll: this._onToggleCollapse,\n                  ariaLabel: ariaLabelForListHeader,\n                  ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                  ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                  selectAllVisibility: selectAllVisibility,\n                  collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                  viewport: viewport,\n                  columnReorderProps: columnReorderProps,\n                  minimumPixelsForDrag: minimumPixelsForDrag,\n                  cellStyleProps: cellStyleProps,\n                  checkboxVisibility,\n                  indentWidth,\n                  onRenderDetailsCheckbox: onRenderCheckbox,\n                  rowWidth: this._sumColumnWidths(this.state.adjustedColumns),\n                  useFastIcons,\n                },\n                this._onRenderDetailsHeader,\n              )}\n          </div>\n          <div onKeyDown={this._onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n            <FocusZone\n              componentRef={this._focusZone}\n              className={classNames.focusZone}\n              direction={FocusZoneDirection.vertical}\n              shouldEnterInnerZone={this.isRightArrow}\n              onActiveElementChanged={this._onActiveRowChanged}\n              onBlur={this._onBlur}\n            >\n              {!this.props.disableSelectionZone ? (\n                <SelectionZone\n                  ref={this._selectionZone}\n                  selection={selection}\n                  selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n                  selectionMode={selectionMode}\n                  onItemInvoked={onItemInvoked}\n                  onItemContextMenu={onItemContextMenu}\n                  enterModalOnTouch={this.props.enterModalSelectionOnTouch}\n                  {...(selectionZoneProps || {})}\n                >\n                  {list}\n                </SelectionZone>\n              ) : (\n                list\n              )}\n            </FocusZone>\n          </div>\n          {onRenderDetailsFooter(\n            {\n              ...detailsFooterProps,\n            },\n            this._onRenderDetailsFooter,\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _onRenderDetailsHeader = (\n    detailsHeaderProps: IDetailsHeaderProps,\n    defaultRender?: IRenderFunction<IDetailsHeaderProps>,\n  ): JSX.Element => {\n    return <DetailsHeader {...detailsHeaderProps} />;\n  };\n\n  private _onRenderDetailsFooter = (\n    detailsFooterProps: IDetailsFooterProps,\n    defaultRender?: IRenderFunction<IDetailsFooterProps>,\n  ): JSX.Element | null => {\n    return null;\n  };\n\n  private _onRenderListCell = (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n    return (item: any, itemIndex: number): React.ReactNode => {\n      return this._onRenderCell(nestingDepth, item, itemIndex);\n    };\n  };\n\n  private _onRenderCell = (nestingDepth: number, item: any, index: number): React.ReactNode => {\n    const {\n      compact,\n      dragDropEvents,\n      rowElementEventMap: eventsToRegister,\n      onRenderMissingItem,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode = this._selection.mode,\n      viewport,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      groupProps,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderRow = this.props.onRenderRow\n      ? composeRenderFunction(this.props.onRenderRow, this._onRenderRow)\n      : this._onRenderRow;\n\n    const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n    const selection = this._selection;\n    const dragDropHelper = this._dragDropHelper;\n    const { adjustedColumns: columns } = this.state;\n\n    const rowProps: IDetailsRowProps = {\n      item: item,\n      itemIndex: index,\n      compact: compact,\n      columns: columns,\n      groupNestingDepth: nestingDepth,\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: this._onRowDidMount,\n      onWillUnmount: this._onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations,\n      rowWidth: this._sumColumnWidths(columns),\n      useFastIcons,\n    };\n\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n\n      return null;\n    }\n\n    return onRenderRow(rowProps);\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _onHeaderKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.down) {\n      if (this._focusZone.current && this._focusZone.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (this._selection.getSelectedIndices().length === 0) {\n          this._selection.setIndexSelected(0, true, false);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  private _onContentKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (this._header.current && this._header.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _onColumnDragEnd = (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent): void => {\n    const { columnReorderOptions } = this.props;\n    let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n    if (columnReorderOptions && columnReorderOptions.onDragEnd) {\n      if (props.dropLocation && props.dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = props.dropLocation;\n      } else if (this._root.current) {\n        const clientRect = this._root.current.getBoundingClientRect();\n        if (\n          event.clientX > clientRect.left &&\n          event.clientX < clientRect.right &&\n          event.clientY > clientRect.top &&\n          event.clientY < clientRect.bottom\n        ) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n      columnReorderOptions.onDragEnd(finalDropLocation);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(newProps: IDetailsListProps, forceUpdate?: boolean, resizingColumnIndex?: number): void {\n    const adjustedColumns = this._getAdjustedColumns(newProps, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    if (adjustedColumns) {\n      this.setState(\n        {\n          adjustedColumns: adjustedColumns,\n          lastWidth: viewportWidth,\n        },\n        this._notifyColumnsResized,\n      );\n    }\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = this.state ? this.state.lastWidth : -1;\n    const lastSelectionMode = this.state ? this.state.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      if (resizingColumnIndex !== undefined) {\n        adjustedColumns = this._getJustifiedColumnsAfterResize(\n          newColumns,\n          viewportWidth,\n          newProps,\n          resizingColumnIndex,\n        );\n      } else {\n        adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps, 0);\n      }\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[]): IColumn[] {\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      if (!newColumn.calculatedWidth) {\n        newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n      }\n\n      return newColumn;\n    });\n  }\n\n  private _getJustifiedColumnsAfterResize(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    resizingColumnIndex: number,\n  ): IColumn[] {\n    const fixedColumns = newColumns.slice(0, resizingColumnIndex);\n    fixedColumns.forEach(column => (column.calculatedWidth = this._getColumnOverride(column.key).currentWidth));\n\n    const fixedWidth = fixedColumns.reduce((total, column, i) => total + getPaddedWidth(column, i === 0, props), 0);\n\n    const remainingColumns = newColumns.slice(resizingColumnIndex);\n    const remainingWidth = viewportWidth - fixedWidth;\n\n    return [\n      ...fixedColumns,\n      ...this._getJustifiedColumns(remainingColumns, remainingWidth, props, resizingColumnIndex),\n    ];\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(\n    newColumns: IColumn[],\n    viewportWidth: number,\n    props: IDetailsListProps,\n    firstIndex: number,\n  ): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const newColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n        ...this._columnOverrides[column.key],\n      };\n\n      const isFirst = i + firstIndex === 0;\n      totalWidth += getPaddedWidth(newColumn, isFirst, props);\n\n      return newColumn;\n    });\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex > 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // tslint:disable-next-line:deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, false, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this._adjustColumns(this.props, true, resizingColumnIndex);\n\n    this.setState({\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n\n  private _getDetailsFooterProps(): IDetailsFooterProps {\n    const { adjustedColumns: columns } = this.state;\n\n    const {\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      selectionMode = this._selection.mode,\n    } = this.props;\n\n    return {\n      columns: columns,\n      groupNestingDepth: this._getGroupNestingDepth(),\n      selection: this._selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }\n\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions } = this.props;\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd: this._onColumnDragEnd,\n      };\n    }\n  }\n\n  private _getGroupProps(detailsGroupProps: IDetailsGroupRenderProps): IGroupRenderProps {\n    const {\n      onRenderFooter: onRenderDetailsGroupFooter,\n      onRenderHeader: onRenderDetailsGroupHeader,\n    } = detailsGroupProps;\n    const { adjustedColumns: columns } = this.state;\n    const {\n      selectionMode = this._selection.mode,\n      viewport,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      checkboxVisibility,\n      indentWidth,\n    } = this.props;\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    const onRenderFooter = onRenderDetailsGroupFooter\n      ? (props: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...props,\n              columns: columns,\n              groupNestingDepth: groupNestingDepth,\n              indentWidth,\n              selection: this._selection,\n              selectionMode: selectionMode,\n              viewport: viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n\n    const onRenderHeader = onRenderDetailsGroupHeader\n      ? (props: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupHeader(\n            {\n              ...props,\n              columns: columns,\n              groupNestingDepth: groupNestingDepth,\n              indentWidth,\n              selection: this._selection,\n              selectionMode: selectionMode,\n              viewport: viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n\n    return {\n      ...detailsGroupProps,\n      onRenderFooter,\n      onRenderHeader,\n    };\n  }\n\n  private isRightArrow = (event: React.KeyboardEvent<HTMLElement>) => {\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n  };\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, isFirst: boolean, props: IDetailsListProps): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    column.calculatedWidth! +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}