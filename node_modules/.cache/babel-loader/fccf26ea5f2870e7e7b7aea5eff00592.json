{"ast":null,"code":"import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element- Element (or ref to an element) to attach the event handler to\n * @param eventName- The event to attach a handler for\n * @param callback- The handler for the event\n * @param useCapture- Whether or not to attach the handler for the capture phase\n */\n\nexport function useOnEvent(element, eventName, callback, useCapture) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  var callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n  React.useEffect(function () {\n    if (element && 'current' in element) {\n      element = element.current;\n    }\n\n    if (!element) {\n      return;\n    }\n\n    var dispose = on(element, eventName, function (ev) {\n      return callbackRef.current(ev);\n    }, useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}","map":{"version":3,"sources":["useOnEvent.ts"],"names":[],"mappings":"AAAA,SAAS,EAAT,QAAmB,qBAAnB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;;AAOA,OAAM,SAAU,UAAV,CACJ,OADI,EAEJ,SAFI,EAGJ,QAHI,EAIJ,UAJI,EAIgB;AAEpB;AACA,MAAM,WAAW,GAAG,KAAK,CAAC,MAAN,CAAa,QAAb,CAApB;AACA,EAAA,WAAW,CAAC,OAAZ,GAAsB,QAAtB;AAEA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,QAAI,OAAO,IAAI,aAAa,OAA5B,EAAqC;AACnC,MAAA,OAAO,GAAG,OAAO,CAAC,OAAlB;AACD;;AACD,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,QAAM,OAAO,GAAG,EAAE,CAAC,OAAD,EAAU,SAAV,EAAqB,UAAC,EAAD,EAAW;AAAK,aAAA,WAAW,CAAC,OAAZ,CAAA,EAAA,CAAA;AAAuB,KAA5D,EAA8D,UAA9D,CAAlB;AACA,WAAO,OAAP;AACD,GAVD,EAUG,CAAC,OAAD,EAAU,SAAV,EAAqB,UAArB,CAVH;AAWD","sourcesContent":["import { on } from '@uifabric/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element- Element (or ref to an element) to attach the event handler to\n * @param eventName- The event to attach a handler for\n * @param callback- The handler for the event\n * @param useCapture- Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    if (element && 'current' in element) {\n      element = element.current;\n    }\n    if (!element) {\n      return;\n    }\n\n    const dispose = on(element, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}