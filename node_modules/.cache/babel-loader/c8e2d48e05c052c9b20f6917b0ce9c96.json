{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, classNamesFunction, findIndex, KeyCodes, getId, warnMutuallyExclusive, warnConditionallyRequiredProps } from '../../Utilities';\nimport { Grid } from '../../utilities/grid/Grid';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nimport { memoizeFunction, warnDeprecations } from '@uifabric/utilities';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SwatchColorPicker';\n\nvar SwatchColorPickerBase =\n/** @class */\nfunction (_super) {\n  __extends(SwatchColorPickerBase, _super);\n\n  function SwatchColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.navigationIdleDelay = 250\n    /* ms */\n    ; // Add an index to each color cells. Memoizes this so that color cells do not re-render on every update.\n\n    _this._getItemsWithIndex = memoizeFunction(function (items) {\n      return items.map(function (item, index) {\n        return __assign(__assign({}, item), {\n          index: index\n        });\n      });\n    });\n    /**\n     * When the whole swatchColorPicker is blurred,\n     * make sure to clear the pending focused stated\n     */\n\n    _this._onSwatchColorPickerBlur = function () {\n      if (_this.props.onCellFocused) {\n        _this._cellFocused = false;\n\n        _this.props.onCellFocused();\n      }\n    };\n    /**\n     * Render a color cell\n     * @param item - The item to render\n     * @returns - Element representing the item\n     */\n\n\n    _this._renderOption = function (item) {\n      var props = _this.props;\n      var id = _this._id;\n      return React.createElement(ColorPickerGridCell, {\n        item: item,\n        idPrefix: id,\n        color: item.color,\n        styles: props.getColorGridCellStyles,\n        disabled: props.disabled,\n        onClick: _this._onCellClick,\n        onHover: _this._onGridCellHovered,\n        onFocus: _this._onGridCellFocused,\n        selected: _this.state.selectedIndex !== undefined && _this.state.selectedIndex === item.index,\n        circle: props.cellShape === 'circle',\n        label: item.label,\n        onMouseEnter: _this._onMouseEnter,\n        onMouseMove: _this._onMouseMove,\n        onMouseLeave: _this._onMouseLeave,\n        onWheel: _this._onWheel,\n        onKeyDown: _this._onKeyDown,\n        height: props.cellHeight,\n        width: props.cellWidth,\n        borderWidth: props.cellBorderWidth\n      });\n    };\n    /**\n     * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n     */\n\n\n    _this._onMouseEnter = function (ev) {\n      if (!_this.props.focusOnHover) {\n        return !_this.isNavigationIdle || !!_this.props.disabled;\n      }\n\n      if (_this.isNavigationIdle && !_this.props.disabled) {\n        ev.currentTarget.focus();\n      }\n\n      return true;\n    };\n    /**\n     * Callback passed to the GridCell that will manage Hover/Focus updates\n     */\n\n\n    _this._onMouseMove = function (ev) {\n      if (!_this.props.focusOnHover) {\n        return !_this.isNavigationIdle || !!_this.props.disabled;\n      }\n\n      var targetElement = ev.currentTarget; // If navigation is idle and the targetElement is the focused element bail out\n      // if (!this.isNavigationIdle || (document && targetElement === (document.activeElement as HTMLElement))) {\n\n      if (_this.isNavigationIdle && !(document && targetElement === document.activeElement)) {\n        targetElement.focus();\n      }\n\n      return true;\n    };\n    /**\n     * Callback passed to the GridCell that will manage Hover/Focus updates\n     */\n\n\n    _this._onMouseLeave = function (ev) {\n      var parentSelector = _this.props.mouseLeaveParentSelector;\n\n      if (!_this.props.focusOnHover || !parentSelector || !_this.isNavigationIdle || _this.props.disabled) {\n        return;\n      } // Get the elements that math the given selector\n\n\n      var elements = document.querySelectorAll(parentSelector); // iterate over the elements return to make sure it is a parent of the target and focus it\n\n      for (var index = 0; index < elements.length; index += 1) {\n        if (elements[index].contains(ev.currentTarget)) {\n          /**\n           * IE11 focus() method forces parents to scroll to top of element.\n           * Edge and IE expose a setActive() function for focusable divs that\n           * sets the page focus but does not scroll the parent element.\n           */\n          if (elements[index].setActive) {\n            try {\n              elements[index].setActive();\n            } catch (e) {\n              /* no-op */\n            }\n          } else {\n            elements[index].focus();\n          }\n\n          break;\n        }\n      }\n    };\n    /**\n     * Callback to make sure we don't update the hovered element during mouse wheel\n     */\n\n\n    _this._onWheel = function () {\n      _this.setNavigationTimeout();\n    };\n    /**\n     * Callback that\n     */\n\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.left || ev.which === KeyCodes.right) {\n        _this.setNavigationTimeout();\n      }\n    };\n    /**\n     * Sets a timeout so we won't process any mouse \"hover\" events\n     * while navigating (via mouseWheel or arrowKeys)\n     */\n\n\n    _this.setNavigationTimeout = function () {\n      if (!_this.isNavigationIdle && _this.navigationIdleTimeoutId !== undefined) {\n        _this.async.clearTimeout(_this.navigationIdleTimeoutId);\n\n        _this.navigationIdleTimeoutId = undefined;\n      } else {\n        _this.isNavigationIdle = false;\n      }\n\n      _this.navigationIdleTimeoutId = _this.async.setTimeout(function () {\n        _this.isNavigationIdle = true;\n      }, _this.navigationIdleDelay);\n    };\n    /**\n     * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n     * NOTE: This will not be triggered if shouldFocusOnHover === true\n     */\n\n\n    _this._onGridCellHovered = function (item) {\n      var onCellHovered = _this.props.onCellHovered;\n\n      if (onCellHovered) {\n        return item ? onCellHovered(item.id, item.color) : onCellHovered();\n      }\n    };\n    /**\n     * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n     */\n\n\n    _this._onGridCellFocused = function (item) {\n      var onCellFocused = _this.props.onCellFocused;\n\n      if (onCellFocused) {\n        if (item) {\n          _this._cellFocused = true;\n          return onCellFocused(item.id, item.color);\n        } else {\n          _this._cellFocused = false;\n          return onCellFocused();\n        }\n      }\n    };\n    /**\n     * Handle the click on a cell\n     * @param item - The cell that the click was fired against\n     */\n\n\n    _this._onCellClick = function (item) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var index = item.index; // If we have a valid index and it is not already\n      // selected, select it\n\n      if (index >= 0 && index !== _this.state.selectedIndex) {\n        if (_this.props.onCellFocused && _this._cellFocused) {\n          _this._cellFocused = false;\n\n          _this.props.onCellFocused();\n        }\n\n        if (_this.props.onColorChanged) {\n          _this.props.onColorChanged(item.id, item.color);\n        } // Update internal state only if the component is uncontrolled\n\n\n        if (_this.props.isControlled !== true) {\n          _this.setState({\n            selectedIndex: index\n          });\n        }\n      }\n    };\n\n    _this._id = props.id || getId('swatchColorPicker');\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        focusOnHover: 'onHover'\n      });\n      warnConditionallyRequiredProps(COMPONENT_NAME, props, ['focusOnHover'], 'mouseLeaveParentSelector', !!props.mouseLeaveParentSelector);\n      warnDeprecations(COMPONENT_NAME, props, {\n        positionInSet: 'ariaPosInSet',\n        setSize: 'ariaSetSize'\n      });\n    }\n\n    _this.isNavigationIdle = true;\n    _this.async = new Async(_this);\n    var selectedIndex;\n\n    if (props.selectedId) {\n      selectedIndex = _this._getSelectedIndex(props.colorCells, props.selectedId);\n    }\n\n    _this.state = {\n      selectedIndex: selectedIndex\n    };\n    return _this;\n  } // tslint:disable-next-line function-name\n\n\n  SwatchColorPickerBase.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.selectedId !== undefined) {\n      this.setState({\n        selectedIndex: this._getSelectedIndex(newProps.colorCells, newProps.selectedId)\n      });\n    }\n  };\n\n  SwatchColorPickerBase.prototype.componentWillUnmount = function () {\n    if (this.props.onCellFocused && this._cellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n\n    this.async.dispose();\n  };\n\n  SwatchColorPickerBase.prototype.render = function () {\n    var _a = this.props,\n        colorCells = _a.colorCells,\n        columnCount = _a.columnCount,\n        // tslint:disable:deprecation\n    _b = _a.ariaPosInSet,\n        // tslint:disable:deprecation\n    ariaPosInSet = _b === void 0 ? this.props.positionInSet : _b,\n        _c = _a.ariaSetSize,\n        ariaSetSize = _c === void 0 ? this.props.setSize : _c,\n        // tslint:enable:deprecation\n    shouldFocusCircularNavigate = _a.shouldFocusCircularNavigate,\n        className = _a.className,\n        doNotContainWithinFocusZone = _a.doNotContainWithinFocusZone,\n        styles = _a.styles,\n        cellMargin = _a.cellMargin;\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme,\n      className: className,\n      cellMargin: cellMargin\n    });\n\n    if (colorCells.length < 1 || columnCount < 1) {\n      return null;\n    }\n\n    return React.createElement(Grid, __assign({}, this.props, {\n      id: this._id,\n      items: this._getItemsWithIndex(colorCells),\n      columnCount: columnCount,\n      onRenderItem: this._renderOption,\n      ariaPosInSet: ariaPosInSet,\n      ariaSetSize: ariaSetSize,\n      shouldFocusCircularNavigate: shouldFocusCircularNavigate,\n      doNotContainWithinFocusZone: doNotContainWithinFocusZone,\n      onBlur: this._onSwatchColorPickerBlur,\n      theme: this.props.theme,\n      styles: {\n        root: classNames.root,\n        tableCell: classNames.tableCell,\n        focusedContainer: classNames.focusedContainer\n      }\n    }));\n  };\n  /**\n   * Get the selected item's index\n   * @param items - The items to search\n   * @param selectedId - The selected item's id to find\n   * @returns - The index of the selected item's id, -1 if there was no match\n   */\n\n\n  SwatchColorPickerBase.prototype._getSelectedIndex = function (items, selectedId) {\n    var selectedIndex = findIndex(items, function (item) {\n      return item.id === selectedId;\n    });\n    return selectedIndex >= 0 ? selectedIndex : undefined;\n  };\n\n  SwatchColorPickerBase.defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    shouldFocusCircularNavigate: true,\n    cellMargin: 10\n  };\n  return SwatchColorPickerBase;\n}(React.Component);\n\nexport { SwatchColorPickerBase };","map":{"version":3,"sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  classNamesFunction,\n  findIndex,\n  KeyCodes,\n  getId,\n  warnMutuallyExclusive,\n  warnConditionallyRequiredProps,\n} from '../../Utilities';\nimport {\n  ISwatchColorPickerProps,\n  ISwatchColorPickerStyleProps,\n  ISwatchColorPickerStyles,\n} from './SwatchColorPicker.types';\nimport { Grid } from '../../utilities/grid/Grid';\nimport { IColorCellProps } from './ColorPickerGridCell.types';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nimport { memoizeFunction, warnDeprecations } from '@uifabric/utilities';\n\nexport interface ISwatchColorPickerState {\n  selectedIndex?: number;\n}\n\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\n\nconst COMPONENT_NAME = 'SwatchColorPicker';\n\nexport class SwatchColorPickerBase extends React.Component<ISwatchColorPickerProps, ISwatchColorPickerState> {\n  public static defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    shouldFocusCircularNavigate: true,\n    cellMargin: 10,\n  } as ISwatchColorPickerProps;\n\n  private _id: string;\n  private _cellFocused: boolean;\n\n  private navigationIdleTimeoutId: number | undefined;\n  private isNavigationIdle: boolean;\n  private readonly navigationIdleDelay: number = 250 /* ms */;\n  private async: Async;\n\n  // Add an index to each color cells. Memoizes this so that color cells do not re-render on every update.\n  private _getItemsWithIndex = memoizeFunction((items: IColorCellProps[]) => {\n    return items.map((item, index) => {\n      return { ...item, index: index };\n    });\n  });\n\n  constructor(props: ISwatchColorPickerProps) {\n    super(props);\n\n    this._id = props.id || getId('swatchColorPicker');\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        focusOnHover: 'onHover',\n      });\n\n      warnConditionallyRequiredProps(\n        COMPONENT_NAME,\n        props,\n        ['focusOnHover'],\n        'mouseLeaveParentSelector',\n        !!props.mouseLeaveParentSelector,\n      );\n\n      warnDeprecations(COMPONENT_NAME, props, {\n        positionInSet: 'ariaPosInSet',\n        setSize: 'ariaSetSize',\n      });\n    }\n\n    this.isNavigationIdle = true;\n    this.async = new Async(this);\n\n    let selectedIndex: number | undefined;\n    if (props.selectedId) {\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\n    }\n\n    this.state = {\n      selectedIndex,\n    };\n  }\n\n  // tslint:disable-next-line function-name\n  public UNSAFE_componentWillReceiveProps(newProps: ISwatchColorPickerProps): void {\n    if (newProps.selectedId !== undefined) {\n      this.setState({\n        selectedIndex: this._getSelectedIndex(newProps.colorCells, newProps.selectedId),\n      });\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.props.onCellFocused && this._cellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n    this.async.dispose();\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      colorCells,\n      columnCount,\n      // tslint:disable:deprecation\n      ariaPosInSet = this.props.positionInSet,\n      ariaSetSize = this.props.setSize,\n      // tslint:enable:deprecation\n      shouldFocusCircularNavigate,\n      className,\n      doNotContainWithinFocusZone,\n      styles,\n      cellMargin,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: this.props.theme!,\n      className,\n      cellMargin,\n    });\n\n    if (colorCells.length < 1 || columnCount < 1) {\n      return null;\n    }\n    return (\n      <Grid\n        {...this.props}\n        id={this._id}\n        items={this._getItemsWithIndex(colorCells)}\n        columnCount={columnCount}\n        onRenderItem={this._renderOption}\n        ariaPosInSet={ariaPosInSet}\n        ariaSetSize={ariaSetSize}\n        shouldFocusCircularNavigate={shouldFocusCircularNavigate}\n        doNotContainWithinFocusZone={doNotContainWithinFocusZone}\n        onBlur={this._onSwatchColorPickerBlur}\n        theme={this.props.theme!}\n        styles={{\n          root: classNames.root,\n          tableCell: classNames.tableCell,\n          focusedContainer: classNames.focusedContainer,\n        }}\n      />\n    );\n  }\n\n  /**\n   * When the whole swatchColorPicker is blurred,\n   * make sure to clear the pending focused stated\n   */\n  private _onSwatchColorPickerBlur = (): void => {\n    if (this.props.onCellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n  };\n\n  /**\n   * Get the selected item's index\n   * @param items - The items to search\n   * @param selectedId - The selected item's id to find\n   * @returns - The index of the selected item's id, -1 if there was no match\n   */\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\n    const selectedIndex = findIndex(items, item => item.id === selectedId);\n    return selectedIndex >= 0 ? selectedIndex : undefined;\n  }\n\n  /**\n   * Render a color cell\n   * @param item - The item to render\n   * @returns - Element representing the item\n   */\n  private _renderOption = (item: IColorCellProps): JSX.Element => {\n    const props = this.props;\n    const id = this._id;\n\n    return (\n      <ColorPickerGridCell\n        item={item}\n        idPrefix={id}\n        color={item.color}\n        styles={props.getColorGridCellStyles}\n        disabled={props.disabled}\n        onClick={this._onCellClick}\n        onHover={this._onGridCellHovered}\n        onFocus={this._onGridCellFocused}\n        selected={this.state.selectedIndex !== undefined && this.state.selectedIndex === item.index}\n        circle={props.cellShape === 'circle'}\n        label={item.label}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onWheel={this._onWheel}\n        onKeyDown={this._onKeyDown}\n        height={props.cellHeight}\n        width={props.cellWidth}\n        borderWidth={props.cellBorderWidth}\n      />\n    );\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\n   */\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n    if (!this.props.focusOnHover) {\n      return !this.isNavigationIdle || !!this.props.disabled;\n    }\n\n    if (this.isNavigationIdle && !this.props.disabled) {\n      ev.currentTarget.focus();\n    }\n\n    return true;\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\n    if (!this.props.focusOnHover) {\n      return !this.isNavigationIdle || !!this.props.disabled;\n    }\n\n    const targetElement = ev.currentTarget as HTMLElement;\n\n    // If navigation is idle and the targetElement is the focused element bail out\n    // if (!this.isNavigationIdle || (document && targetElement === (document.activeElement as HTMLElement))) {\n    if (this.isNavigationIdle && !(document && targetElement === (document.activeElement as HTMLElement))) {\n      targetElement.focus();\n    }\n\n    return true;\n  };\n\n  /**\n   * Callback passed to the GridCell that will manage Hover/Focus updates\n   */\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const parentSelector = this.props.mouseLeaveParentSelector;\n\n    if (!this.props.focusOnHover || !parentSelector || !this.isNavigationIdle || this.props.disabled) {\n      return;\n    }\n\n    // Get the elements that math the given selector\n    const elements = document.querySelectorAll(parentSelector);\n\n    // iterate over the elements return to make sure it is a parent of the target and focus it\n    for (let index = 0; index < elements.length; index += 1) {\n      if (elements[index].contains(ev.currentTarget)) {\n        /**\n         * IE11 focus() method forces parents to scroll to top of element.\n         * Edge and IE expose a setActive() function for focusable divs that\n         * sets the page focus but does not scroll the parent element.\n         */\n        if ((elements[index] as any).setActive) {\n          try {\n            (elements[index] as any).setActive();\n          } catch (e) {\n            /* no-op */\n          }\n        } else {\n          (elements[index] as HTMLElement).focus();\n        }\n\n        break;\n      }\n    }\n  };\n\n  /**\n   * Callback to make sure we don't update the hovered element during mouse wheel\n   */\n  private _onWheel = (): void => {\n    this.setNavigationTimeout();\n  };\n\n  /**\n   * Callback that\n   */\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLButtonElement>): void => {\n    if (\n      ev.which === KeyCodes.up ||\n      ev.which === KeyCodes.down ||\n      ev.which === KeyCodes.left ||\n      ev.which === KeyCodes.right\n    ) {\n      this.setNavigationTimeout();\n    }\n  };\n\n  /**\n   * Sets a timeout so we won't process any mouse \"hover\" events\n   * while navigating (via mouseWheel or arrowKeys)\n   */\n  private setNavigationTimeout = () => {\n    if (!this.isNavigationIdle && this.navigationIdleTimeoutId !== undefined) {\n      this.async.clearTimeout(this.navigationIdleTimeoutId);\n      this.navigationIdleTimeoutId = undefined;\n    } else {\n      this.isNavigationIdle = false;\n    }\n\n    this.navigationIdleTimeoutId = this.async.setTimeout(() => {\n      this.isNavigationIdle = true;\n    }, this.navigationIdleDelay);\n  };\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\n   */\n  private _onGridCellHovered = (item?: IColorCellProps): void => {\n    const { onCellHovered } = this.props;\n\n    if (onCellHovered) {\n      return item ? onCellHovered(item.id, item.color) : onCellHovered();\n    }\n  };\n\n  /**\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\n   */\n  private _onGridCellFocused = (item?: IColorCellProps): void => {\n    const { onCellFocused } = this.props;\n    if (onCellFocused) {\n      if (item) {\n        this._cellFocused = true;\n        return onCellFocused(item.id, item.color);\n      } else {\n        this._cellFocused = false;\n        return onCellFocused();\n      }\n    }\n  };\n\n  /**\n   * Handle the click on a cell\n   * @param item - The cell that the click was fired against\n   */\n  private _onCellClick = (item: IColorCellProps): void => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const index = item.index as number;\n\n    // If we have a valid index and it is not already\n    // selected, select it\n    if (index >= 0 && index !== this.state.selectedIndex) {\n      if (this.props.onCellFocused && this._cellFocused) {\n        this._cellFocused = false;\n        this.props.onCellFocused();\n      }\n\n      if (this.props.onColorChanged) {\n        this.props.onColorChanged(item.id, item.color);\n      }\n\n      // Update internal state only if the component is uncontrolled\n      if (this.props.isControlled !== true) {\n        this.setState({\n          selectedIndex: index,\n        });\n      }\n    }\n  };\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}