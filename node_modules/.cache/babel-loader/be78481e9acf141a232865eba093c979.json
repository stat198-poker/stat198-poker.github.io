{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projects/izzielau.github.io/src/views/spotify/Spotify.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from './../../components/Button.js';\nimport TransparentButton from './../../components/TransparentButton.js';\nimport './Spotify.css';\nimport genres from \"./../../assets/spotify-demos/genres.png\";\nimport popularity from \"./../../assets/spotify-demos/popularity.png\";\nimport rhizomeROC from \"./../../assets/spotify-demos/rhizome_roc.png\";\n\nfunction Spotify() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"spotify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"backbutton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    link: \"/software\",\n    text: \"Back\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navigation-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TransparentButton, {\n    link: \"/spotify#overview\",\n    text: \"Overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TransparentButton, {\n    link: \"/spotify#exploration\",\n    text: \"Exploration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(TransparentButton, {\n    link: \"/spotify#model\",\n    text: \"Modeling\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"text-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    name: \"overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }\n  }, \"Spotify API\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }\n  }, \"Overview\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }\n  }, \"I've been playing piano since the age of four, singing (perhaps out-of-tune) since the age of six, and listening to Spotify at least an hour a day since I first got a Premium account in college.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 19\n    }\n  }, \"I discovered the Spotify API after researching a little bit about Spotify Wrapped and decided I wanted to do more research about my personal listening habits!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }\n  }, \"This page will dive into the projects that I was able to create using the API:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 27\n    }\n  }, \"Did exploratory data analysis to find my favorite genres and artists\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 27\n    }\n  }, \"Trained a linear regression model to predict whether I'd like a song\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }\n  }, \"I used Jupyter Notebook, pandas, matplotlib, requests, seaborn, numpy, and scikit-learn for this project.\"), /*#__PURE__*/React.createElement(\"a\", {\n    name: \"exploration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }\n  }, \"Exploration\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, \"I first explored which genres I listened to the most by aggregating each genres' appearance in the list of genres corresponding to my top 20 artists.\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image\",\n    src: genres,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 19\n    }\n  }, \"I noticed that the API returns a feature called \\\"popularity\\\" for each artist, and have always been a little curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between artist ranking and popularity:\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image\",\n    src: popularity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }\n  }, \"With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A negative r-value of this magnitude could imply that my more popular artists have higher popularity scores-- a.k.a. a negative correlation between personal preference and artist popularity.\"), /*#__PURE__*/React.createElement(\"a\", {\n    name: \"model\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"subtitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }, \"Logistic Regression Model\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, \"I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that the API could return certain features of song tracks, I wanted to see if I could build myself a personalized recommendations algorithm using these features and the information that I know about my personal preferences.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }, \"The features for each track returned by the API include:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 27\n    }\n  }, \"acousticness\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 27\n    }\n  }, \"danceability\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 27\n    }\n  }, \"energy\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 27\n    }\n  }, \"instrumentalness\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 27\n    }\n  }, \"key\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }\n  }, \"liveness\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 27\n    }\n  }, \"loudness\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 27\n    }\n  }, \"speechiness\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }\n  }, \"tempo\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 27\n    }\n  }, \"time signature\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 27\n    }\n  }, \"valence\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, \"Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike) and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 27\n    }\n  }, \"one-hot-encoding the \\\"key\\\" column\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 27\n    }\n  }, \"filling null values\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 27\n    }\n  }, \"removing time signature as a feature after realizing most values were missing or redundant (i.e. all 4's) or incorrect (i.e. 0)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, \"Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using scikit-learn. With just these basic features, the model reached:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 27\n    }\n  }, \"Training accuracy of 78.47%\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 27\n    }\n  }, \"Validation accuracy of 71.43%\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, \"Plotting the ROC curve of the model reveals:\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"image\",\n    src: rhizomeROC,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, \"I also wanted to test how well the model responds to new data, so I created a completely new playlist of 40 songs I've never listened to before and had the model predict 0-1 labels of preference. I listened to the songs and manually labeled them, and then calculated the model's accuracy to be 65%.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, \"This wasn't as stastically significant as I wanted it to be (p=0.04). Some ideas I have moving forward in the next iteration of this model are to add:\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 27\n    }\n  }, \"Add genre as a feature\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 27\n    }\n  }, \"Add artist name as a feature\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 27\n    }\n  }, \"Add album name as a feature\")))));\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/Users/mac/Desktop/projects/izzielau.github.io/src/views/spotify/Spotify.js"],"names":["React","Link","Button","TransparentButton","genres","popularity","rhizomeROC","Spotify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Button from './../../components/Button.js'\nimport TransparentButton from './../../components/TransparentButton.js'\n\nimport './Spotify.css';\nimport genres from \"./../../assets/spotify-demos/genres.png\"\nimport popularity from \"./../../assets/spotify-demos/popularity.png\"\nimport rhizomeROC from \"./../../assets/spotify-demos/rhizome_roc.png\"\n\nfunction Spotify() {\n  return (\n      <div class=\"spotify\">\n              <div className=\"backbutton\">\n                  <Button link=\"/software\" text=\"Back\"/>\n              </div>\n              <div className=\"navigation-menu\">\n                  <TransparentButton link=\"/spotify#overview\" text=\"Overview\"/>\n                  <TransparentButton link=\"/spotify#exploration\" text=\"Exploration\"/>\n                  <TransparentButton link=\"/spotify#model\" text=\"Modeling\"/>\n              </div>\n              <div class=\"text-container\">\n                  <a name=\"overview\">\n                      <div class=\"title\">\n                          Spotify API\n                      </div>\n                  </a>\n                  <div className=\"subtitle\">\n                      Overview\n                  </div>\n                  <div className=\"text\">\n                      I've been playing piano since the age of four, singing (perhaps out-of-tune) since the age of six, and\n                      listening to Spotify at least an hour a day since I first got a Premium account in college.\n                  </div>\n                  <div className=\"text\">\n                      I discovered the Spotify API after researching a little bit about Spotify Wrapped and decided I wanted\n                      to do more research about my personal listening habits!\n                  </div>\n                  <div className=\"text\">\n                      This page will dive into the projects that I was able to create using the API:\n                      <ul>\n                          <li>Did exploratory data analysis to find my favorite genres and artists</li>\n                          <li>Trained a linear regression model to predict whether I'd like a song</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      I used Jupyter Notebook, pandas, matplotlib, requests, seaborn, numpy, and scikit-learn for this project.\n                  </div>\n\n                  <a name=\"exploration\">\n                      <div className=\"spacer\" />\n                  </a>\n                  <div className=\"subtitle\">\n                      Exploration\n                  </div>\n                  <div className=\"text\">\n                      I first explored which genres I listened to the most by aggregating each genres' appearance in the list\n                      of genres corresponding to my top 20 artists.\n                  </div>\n                  <img className=\"image\" src={genres} />\n                  <div className=\"text\">\n                      I noticed that the API returns a feature called \"popularity\" for each artist, and have always been a little\n                      curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between\n                      artist ranking and popularity:\n                  </div>\n                  <img className=\"image\" src={popularity} />\n                  <div className=\"text\">\n                      With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A\n                      negative r-value of this magnitude could imply that my more popular artists have higher popularity scores--\n                      a.k.a. a negative correlation between personal preference and artist popularity.\n                  </div>\n\n                  <a name=\"model\">\n                      <div className=\"spacer\" />\n                  </a>\n                  <div className=\"subtitle\">\n                      Logistic Regression Model\n                  </div>\n                  <div className=\"text\">\n                      I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that\n                      the API could return certain features of song tracks, I wanted to see if I could build myself a personalized\n                      recommendations algorithm using these features and the information that I know about my personal preferences.\n                  </div>\n                  <div className=\"text\">\n                      The features for each track returned by the API include:\n                      <ul>\n                          <li>acousticness</li>\n                          <li>danceability</li>\n                          <li>energy</li>\n                          <li>instrumentalness</li>\n                          <li>key</li>\n                          <li>liveness</li>\n                          <li>loudness</li>\n                          <li>speechiness</li>\n                          <li>tempo</li>\n                          <li>time signature</li>\n                          <li>valence</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike)\n                      and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\n                      <ul>\n                          <li>one-hot-encoding the \"key\" column</li>\n                          <li>filling null values</li>\n                          <li>removing time signature as a feature after realizing most values were missing or redundant (i.e.\n                              all 4's) or incorrect (i.e. 0)</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using\n                      scikit-learn. With just these basic features, the model reached:\n                      <ul>\n                          <li>Training accuracy of 78.47%</li>\n                          <li>Validation accuracy of 71.43%</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Plotting the ROC curve of the model reveals:\n                  </div>\n                  <img className=\"image\" src={rhizomeROC} />\n                  <div className=\"text\">\n                      I also wanted to test how well the model responds to new data, so I created a completely new playlist of\n                      40 songs I've never listened to before and had the model predict 0-1 labels of preference. I listened to the\n                      songs and manually labeled them, and then calculated the model's accuracy to be 65%.\n                  </div>\n                  <div className=\"text\">\n                      This wasn't as stastically significant as I wanted it to be (p=0.04). Some ideas I have moving forward in\n                      the next iteration of this model are to add:\n                      <ul>\n                          <li>Add genre as a feature</li>\n                          <li>Add artist name as a feature</li>\n                          <li>Add album name as a feature</li>\n                      </ul>\n                  </div>\n          </div>\n      {/*\n          <div className=\"backbutton\">\n              <BackButton link=\"/software\" text=\"back to projects\"/>\n          </div>\n          <div className=\"spotify\">\n              <div className=\"navigation-menu\">\n                  <a href=\"/spotify#overview\" style={{ textDecoration: 'none' }}>\n                      <div className=\"row\">\n                          <div class=\"text\">\n                            Overview\n                          </div>\n                      </div>\n                  </a>\n                  <a href=\"/spotify#exploration\" style={{ textDecoration: 'none' }}>\n                      <div className=\"row\">\n                          <div class=\"text\">\n                            Exploration\n                          </div>\n                      </div>\n                  </a>\n                  <a href=\"/spotify#model\" style={{ textDecoration: 'none' }}>\n                  <div className=\"row\">\n                      <div class=\"text\">\n                        Logistic Regression Model\n                      </div>\n                  </div>\n                  </a>\n              </div>\n              <div className=\"glass\">\n                  <a name=\"overview\">\n                      <div className=\"title\">\n                          Spotify API\n                      </div>\n                  </a>\n                  <div className=\"subtitle\">\n                      Overview\n                  </div>\n                  <div className=\"text\">\n                      I've been playing piano since the age of four, singing (perhaps out-of-tune) since the age of six, and\n                      listening to Spotify at least an hour a day since I first got a Premium account in college.\n                  </div>\n                  <div className=\"text\">\n                      I discovered the Spotify API after researching a little bit about Spotify Wrapped and decided I wanted\n                      to do more research about my personal listening habits!\n                  </div>\n                  <div className=\"text\">\n                      This page will dive into the projects that I was able to create using the API:\n                      <ul>\n                          <li>Did exploratory data analysis to find my favorite genres and artists</li>\n                          <li>Trained a linear regression model to predict whether I'd like a song</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                  I used Jupyter Notebook, pandas, matplotlib, requests, seaborn, numpy, and scikit-learn for this project.\n                  </div>\n                  <a name=\"exploration\">\n                      <div className=\"spacer\" />\n                  </a>\n                  <div className=\"subtitle\">\n                      Exploration\n                  </div>\n                  <div className=\"text\">\n                      I first explored which genres I listened to the most by aggregating each genres' appearance in the list\n                      of genres corresponding to my top 20 artists.\n                  </div>\n                  <img className=\"image\" src={genres} />\n                  <div className=\"text\">\n                      I noticed that the API returns a feature called \"popularity\" for each artist, and have always been a little\n                      curious about whether the music I listen to is mainstream. To find out, I graphed the correlation between\n                      artist ranking and popularity:\n                  </div>\n                  <img className=\"image\" src={popularity} />\n                  <div className=\"text\">\n                      With an r-value of -0.44945735259442465, I'd say there is definitely a chance that this could be true. A\n                      negative r-value of this magnitude could imply that my more popular artists have higher popularity scores--\n                      a.k.a. a negative correlation between personal preference and artist popularity.\n                  </div>\n                  <a name=\"model\">\n                      <div className=\"spacer\" />\n                  </a>\n                  <div className=\"subtitle\">\n                      Logistic Regression Model\n                  </div>\n                  <div className=\"text\">\n                      I personally have had a variety of hit-and-misses with Spotify's recommendations algorithm. When I saw that\n                      the API could return certain features of song tracks, I wanted to see if I could build myself a personalized\n                      recommendations algorithm using these features and the information that I know about my personal preferences.\n                  </div>\n                  <div className=\"text\">\n                      The features for each track returned by the API include:\n                      <ul>\n                          <li>acousticness</li>\n                          <li>danceability</li>\n                          <li>energy</li>\n                          <li>instrumentalness</li>\n                          <li>key</li>\n                          <li>liveness</li>\n                          <li>loudness</li>\n                          <li>speechiness</li>\n                          <li>tempo</li>\n                          <li>time signature</li>\n                          <li>valence</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Using the API, I pulled 552 songs from my own playlists and my friends' playlists and added a 0 (dislike)\n                      and 1 (like) label to each song. I cleaned the data and prepared it for training, including changes such as:\n                      <ul>\n                          <li>one-hot-encoding the \"key\" column</li>\n                          <li>filling null values</li>\n                          <li>removing time signature as a feature after realizing most values were missing or redundant (i.e.\n                              all 4's) or incorrect (i.e. 0)</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Afterwards I did a 9:1 split of the data and trained a Logistic Regression model on the data using\n                      scikit-learn. With just these basic features, the model reached:\n                      <ul>\n                          <li>Training accuracy of 78.47%</li>\n                          <li>Validation accuracy of 71.43%</li>\n                      </ul>\n                  </div>\n                  <div className=\"text\">\n                      Plotting the ROC curve of the model reveals:\n                  </div>\n                  <img className=\"image\" src={rhizomeROC} />\n                  <div className=\"text\">\n                      I also wanted to test how well the model responds to new data, so I created a completely new playlist of\n                      40 songs I've never listened to before and had the model predict 0-1 labels of preference. I listened to the\n                      songs and manually labeled them, and then calculated the model's accuracy to be 65%.\n                  </div>\n                  <div className=\"text\">\n                      This wasn't as stastically significant as I wanted it to be (p=0.04). Some ideas I have moving forward in\n                      the next iteration of this model are to add:\n                      <ul>\n                          <li>Add genre as a feature</li>\n                          <li>Add artist name as a feature</li>\n                          <li>Add album name as a feature</li>\n                      </ul>\n                  </div>\n                  <div className=\"spacer\" />\n              </div>\n          </div>\n      </div>\n      */}\n      </div>\n  );\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}