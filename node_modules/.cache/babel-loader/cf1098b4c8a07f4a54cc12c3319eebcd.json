{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook to ensure a callback function always has the same identity.\n * Unlike `React.useCallback`, this is guaranteed to always return the same value.\n *\n * If the callback should ever change based on dependencies, use `React.useCallback` instead.\n *\n * @param callback - The callback. Only the first value passed is respected.\n * @returns The callback. The identity of this callback will always be the same.\n */\n// tslint:disable-next-line:no-any\n\nexport function useConstCallback(callback) {\n  var ref = React.useRef();\n\n  if (!ref.current) {\n    ref.current = callback;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["useConstCallback.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA;;;;;;;;;AASA;;AACA,OAAM,SAAU,gBAAV,CAA8D,QAA9D,EAAyE;AAC7E,MAAM,GAAG,GAAG,KAAK,CAAC,MAAN,EAAZ;;AACA,MAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AAChB,IAAA,GAAG,CAAC,OAAJ,GAAc,QAAd;AACD;;AACD,SAAO,GAAG,CAAC,OAAX;AACD","sourcesContent":["import * as React from 'react';\n\n/**\n * Hook to ensure a callback function always has the same identity.\n * Unlike `React.useCallback`, this is guaranteed to always return the same value.\n *\n * If the callback should ever change based on dependencies, use `React.useCallback` instead.\n *\n * @param callback - The callback. Only the first value passed is respected.\n * @returns The callback. The identity of this callback will always be the same.\n */\n// tslint:disable-next-line:no-any\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T {\n  const ref = React.useRef<T>();\n  if (!ref.current) {\n    ref.current = callback;\n  }\n  return ref.current;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}