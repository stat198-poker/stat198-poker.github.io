{"ast":null,"code":"import * as React from 'react';\nimport { Customizations } from './Customizations';\n/**\n * Hook to get Customizations settings. It will trigger component state update on settings change observed.\n */\n\nexport function useCustomizationSettings(properties, scopeName, localSettings) {\n  var _a = React.useState(Customizations.getSettings(properties, scopeName, localSettings)),\n      settings = _a[0],\n      setSettings = _a[1];\n\n  var onCustomizationChange = React.useCallback(function () {\n    var globalSettings = Customizations.getSettings(properties, scopeName, localSettings);\n    setSettings(globalSettings);\n  }, [properties, scopeName, localSettings]);\n  React.useEffect(function () {\n    Customizations.observe(onCustomizationChange);\n    return function () {\n      return Customizations.unobserve(onCustomizationChange);\n    };\n  }, [onCustomizationChange]);\n  return settings;\n}","map":{"version":3,"sources":["customizations/useCustomizationSettings.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAoB,cAApB,QAA2D,kBAA3D;AAEA;;;;AAGA,OAAM,SAAU,wBAAV,CACJ,UADI,EAEJ,SAFI,EAGJ,aAHI,EAG2B;AAEzB,MAAA,EAAA,GAAA,KAAA,CAAA,QAAA,CAAA,cAAA,CAAA,WAAA,CAAA,UAAA,EAAA,SAAA,EAAA,aAAA,CAAA,CAAA;AAAA,MAAC,QAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAW,WAAA,GAAA,EAAA,CAAA,CAAA,CAAX;;AAEN,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAN,CAAkB,YAAA;AAC9C,QAAM,cAAc,GAAG,cAAc,CAAC,WAAf,CAA2B,UAA3B,EAAuC,SAAvC,EAAkD,aAAlD,CAAvB;AACA,IAAA,WAAW,CAAC,cAAD,CAAX;AACD,GAH6B,EAG3B,CAAC,UAAD,EAAa,SAAb,EAAwB,aAAxB,CAH2B,CAA9B;AAKA,EAAA,KAAK,CAAC,SAAN,CAAgB,YAAA;AACd,IAAA,cAAc,CAAC,OAAf,CAAuB,qBAAvB;AAEA,WAAO,YAAA;AAAM,aAAA,cAAc,CAAC,SAAf,CAAA,qBAAA,CAAA;AAA+C,KAA5D;AACD,GAJD,EAIG,CAAC,qBAAD,CAJH;AAMA,SAAO,QAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { ISettings, Customizations, ICustomizations } from './Customizations';\n\n/**\n * Hook to get Customizations settings. It will trigger component state update on settings change observed.\n */\nexport function useCustomizationSettings(\n  properties: string[],\n  scopeName?: string,\n  localSettings?: ICustomizations,\n): ISettings {\n  const [settings, setSettings] = React.useState(Customizations.getSettings(properties, scopeName, localSettings));\n\n  const onCustomizationChange = React.useCallback(() => {\n    const globalSettings = Customizations.getSettings(properties, scopeName, localSettings);\n    setSettings(globalSettings);\n  }, [properties, scopeName, localSettings]);\n\n  React.useEffect(() => {\n    Customizations.observe(onCustomizationChange);\n\n    return () => Customizations.unobserve(onCustomizationChange);\n  }, [onCustomizationChange]);\n\n  return settings;\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}