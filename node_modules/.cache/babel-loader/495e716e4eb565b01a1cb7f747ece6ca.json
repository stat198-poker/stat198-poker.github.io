{"ast":null,"code":"import { findElementRecursive } from './findElementRecursive';\n/**\n * Determines if an element, or any of its ancestors, contain the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\n\nexport function elementContainsAttribute(element, attribute) {\n  var elementMatch = findElementRecursive(element, function (testElement) {\n    return testElement.hasAttribute(attribute);\n  });\n  return elementMatch && elementMatch.getAttribute(attribute);\n}","map":{"version":3,"sources":["dom/elementContainsAttribute.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAT,QAAqC,wBAArC;AACA;;;;;;;AAMA,OAAM,SAAU,wBAAV,CAAmC,OAAnC,EAAyD,SAAzD,EAA0E;AAC9E,MAAI,YAAY,GAAG,oBAAoB,CAAC,OAAD,EAAU,UAAC,WAAD,EAAyB;AAAK,WAAA,WAAW,CAAC,YAAZ,CAAA,SAAA,CAAA;AAAmC,GAA3E,CAAvC;AACA,SAAO,YAAY,IAAI,YAAY,CAAC,YAAb,CAA0B,SAA1B,CAAvB;AACD","sourcesContent":["import { findElementRecursive } from './findElementRecursive';\n/**\n * Determines if an element, or any of its ancestors, contain the given attribute\n * @param element - element to start searching at\n * @param attribute - the attribute to search for\n * @returns the value of the first instance found\n */\nexport function elementContainsAttribute(element: HTMLElement, attribute: string): string | null {\n  let elementMatch = findElementRecursive(element, (testElement: HTMLElement) => testElement.hasAttribute(attribute));\n  return elementMatch && elementMatch.getAttribute(attribute);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}