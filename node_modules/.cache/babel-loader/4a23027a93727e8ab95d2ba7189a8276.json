{"ast":null,"code":"var REACT_LIFECYCLE_EXCLUSIONS = ['setState', 'render', 'componentWillMount', 'UNSAFE_componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'getSnapshotBeforeUpdate', 'UNSAFE_componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\n\nexport function hoistMethods( // tslint:disable-next-line:no-any\ndestination, // tslint:disable-next-line:no-any\nsource, exclusions) {\n  if (exclusions === void 0) {\n    exclusions = REACT_LIFECYCLE_EXCLUSIONS;\n  }\n\n  var hoisted = [];\n\n  var _loop_1 = function (methodName) {\n    if (typeof source[methodName] === 'function' && destination[methodName] === undefined && (!exclusions || exclusions.indexOf(methodName) === -1)) {\n      hoisted.push(methodName);\n      /* tslint:disable:no-function-expression */\n\n      destination[methodName] = function () {\n        source[methodName].apply(source, arguments);\n      };\n      /* tslint:enable */\n\n    }\n  };\n\n  for (var methodName in source) {\n    _loop_1(methodName);\n  }\n\n  return hoisted;\n}\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// tslint:disable-next-line:no-any\n\nexport function unhoistMethods(source, methodNames) {\n  methodNames.forEach(function (methodName) {\n    return delete source[methodName];\n  });\n}","map":{"version":3,"sources":["hoist.ts"],"names":[],"mappings":"AAAA,IAAM,0BAA0B,GAAG,CACjC,UADiC,EAEjC,QAFiC,EAGjC,oBAHiC,EAIjC,2BAJiC,EAKjC,mBALiC,EAMjC,2BANiC,EAOjC,kCAPiC,EAQjC,uBARiC,EASjC,qBATiC,EAUjC,yBAViC,EAWjC,4BAXiC,EAYjC,oBAZiC,EAajC,sBAbiC,CAAnC;AAgBA;;;;;;;;;;AASA,OAAM,SAAU,YAAV,EACJ;AACA,WAFI,EAGJ;AACA,MAJI,EAKJ,UALI,EAK6C;AAAjD,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,0BAAA;AAAiD;;AAEjD,MAAI,OAAO,GAAa,EAAxB;;0BACS,U,EAAU;AACjB,QACE,OAAO,MAAM,CAAC,UAAD,CAAb,KAA8B,UAA9B,IACA,WAAW,CAAC,UAAD,CAAX,KAA4B,SAD5B,KAEC,CAAC,UAAD,IAAe,UAAU,CAAC,OAAX,CAAmB,UAAnB,MAAmC,CAAC,CAFpD,CADF,EAIE;AACA,MAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACA;;AACA,MAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,YAAA;AACxB,QAAA,MAAM,CAAC,UAAD,CAAN,CAAmB,KAAnB,CAAyB,MAAzB,EAAiC,SAAjC;AACD,OAFD;AAGA;;AACD;;;AAZH,OAAK,IAAI,UAAT,IAAuB,MAAvB,EAA6B;YAApB,U;AAaR;;AAED,SAAO,OAAP;AACD;AAED;;;;;;;AAOA;;AACA,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAAsC,WAAtC,EAA2D;AAC/D,EAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,UAAD,EAAmB;AAAK,WAAA,OAAO,MAAM,CAAb,UAAa,CAAb;AAAyB,GAArE;AACD","sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\n  'setState',\n  'render',\n  'componentWillMount',\n  'UNSAFE_componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'UNSAFE_componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'getSnapshotBeforeUpdate',\n  'UNSAFE_componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount',\n];\n\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\nexport function hoistMethods(\n  // tslint:disable-next-line:no-any\n  destination: any,\n  // tslint:disable-next-line:no-any\n  source: any,\n  exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS,\n): string[] {\n  let hoisted: string[] = [];\n  for (let methodName in source) {\n    if (\n      typeof source[methodName] === 'function' &&\n      destination[methodName] === undefined &&\n      (!exclusions || exclusions.indexOf(methodName) === -1)\n    ) {\n      hoisted.push(methodName);\n      /* tslint:disable:no-function-expression */\n      destination[methodName] = function(): void {\n        source[methodName].apply(source, arguments);\n      };\n      /* tslint:enable */\n    }\n  }\n\n  return hoisted;\n}\n\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// tslint:disable-next-line:no-any\nexport function unhoistMethods(source: any, methodNames: string[]): void {\n  methodNames.forEach((methodName: string) => delete source[methodName]);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}