{"ast":null,"code":"import { useRef, useCallback } from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\n\nexport function useMergedRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  var state = useRef(); // Update refs list.\n\n  state.current = refs;\n  return useCallback(function (value) {\n    for (var _i = 0, _a = state.current; _i < _a.length; _i++) {\n      var ref = _a[_i];\n\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  }, []);\n}","map":{"version":3,"sources":["useMergedRefs.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,WAAjB,QAA2D,OAA3D;AAEA;;;;;;AAKA,OAAM,SAAU,aAAV,GAAuB;AAAI,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC/B,MAAM,KAAK,GAAG,MAAM,EAApB,CAD2B,CAG3B;;AACA,EAAA,KAAK,CAAC,OAAN,GAAgB,IAAhB;AAEA,SAAO,WAAW,CAAC,UAAC,KAAD,EAAS;AAC1B,SAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,CAAC,OAAxB,EAAkB,EAAA,GAAA,EAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAAkC;AAA7B,UAAM,GAAG,GAAA,EAAA,CAAA,EAAA,CAAT;;AACH,UAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B,QAAA,GAAG,CAAC,KAAD,CAAH;AACD,OAFD,MAEO,IAAI,GAAJ,EAAS;AACd;AACE,QAAA,GAAuC,CAAC,OAAxC,GAAkD,KAAlD;AACH;AACF;AACF,GATiB,EASf,EATe,CAAlB;AAUD","sourcesContent":["import { useRef, useCallback, Ref, MutableRefObject } from 'react';\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs- Refs to collectively update with one ref value.\n */\nexport function useMergedRefs<T>(...refs: Ref<T>[]): (instance: T) => void {\n  const state = useRef<(Ref<T> | undefined)[]>();\n\n  // Update refs list.\n  state.current = refs;\n\n  return useCallback((value: T) => {\n    for (const ref of state.current!) {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ((ref as unknown) as MutableRefObject<T>).current = value;\n      }\n    }\n  }, []);\n}\n"],"sourceRoot":"../src/"},"metadata":{},"sourceType":"module"}