{"version":3,"sources":["components/Button.js","components/Header.js","views/landing/Landing.js","serviceWorker.js","index.js"],"names":["Button","text","link","to","style","textDecoration","className","Header","class","Landing","src","alt","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAiBeA,G,8BAZA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpB,OACI,6BACI,kBAAC,IAAD,CAAMC,GAAID,EAAME,MAAO,CAAEC,eAAgB,SACrC,yBAAKC,UAAU,UACVL,OCUNM,EAdA,WACX,OACI,yBAAKD,UAAU,UACX,yBAAKE,MAAM,QACP,kBAAC,EAAD,CAAQP,KAAK,WAAWC,KAAK,OAEjC,yBAAKM,MAAM,SACP,kBAAC,EAAD,CAAQP,KAAK,UAAUC,KAAK,aAC5B,kBAAC,EAAD,CAAQD,KAAK,YAAYC,KAAK,kB,YCmD/BO,MA1Df,WACE,OACI,yBAAKD,MAAM,WACL,yBAAKA,MAAM,SACP,yBAAKA,MAAM,QAAQE,IAAI,+EAA+EC,IAAI,WAE9G,yBAAKH,MAAM,kBACP,0CACA,uDAEA,2BAAG,6CAAH,2BAEA,0CACA,4BACI,yDACA,4DAGJ,kDACA,4BACI,yDACA,4DAGJ,oDACA,uBAAGJ,MAAO,CAAC,OAAU,SAArB,KACA,4ZAKA,uBAAGA,MAAO,CAAC,OAAU,SAArB,KACA,ioBAQA,uBAAGA,MAAO,CAAC,OAAU,SAArB,KACA,2TAIA,uBAAGA,MAAO,CAAC,OAAU,SAArB,KACA,ugBCzCIQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EACF,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKT,MAAM,cACP,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWX,OAKjDY,IAASC,OAAOL,EAASM,SAASC,eAAe,SD4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9220cd3d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css'\n\nconst Button = ({ text, link }) => {\n    return(\n        <div>\n            <Link to={link} style={{ textDecoration: 'none' }}>\n                <div className=\"button\" >\n                    {text}\n                </div>\n            </Link>\n        </div>\n    );\n}\n\nexport default Button;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Header.css';\nimport Button from './Button.js'\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div class=\"left\">\n                <Button text=\"Stat 198\" link=\"/\"/>\n            </div>\n            <div class=\"right\">\n                <Button text=\"Grading\" link=\"/grading\"/>\n                <Button text=\"Resources\" link=\"/resources\"/>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport LandingButton from './../../components/LandingButton.js'\nimport Header from './../../components/Header.js'\n\nimport './Landing.css';\n\nfunction Landing() {\n  return (\n      <div class=\"landing\">\n            <div class=\"photo\">\n                <img class=\"photo\" src=\"https://i.pinimg.com/originals/e1/48/3c/e1483c7b75c486d124d9d1f1a70ea429.png\" alt=\"flush\" />\n            </div>\n            <div class=\"text-container\">\n                <h1> STAT 198 </h1>\n                <h2> Introduction to Poker </h2>\n\n                <p><b> Instructors: </b> Kevin An, Aidan Reilly</p>\n                                \n                <h3> Lectures </h3>\n                <ul> \n                    <li> Mondays, 7PM – 8PM </li>\n                    <li> Wednesdays, 7PM – 8PM</li> \n                </ul>\n\n                <h3> Playing Sessions </h3>\n                <ul> \n                    <li> Mondays, 8PM – 9PM </li>\n                    <li> Wednesdays, 8PM – 9PM</li> \n                </ul>\n\n                <h3> Course Description </h3>\n                <p style={{'height': '15px'}}> </p>\n                <p> The purpose of this course is to teach students poker fundamentals, both to help them \n                    improve at the game and learn wider applications of the game theory found in poker. While we \n                    believe students of all skill levels will benefit from the course, it is primarily targeted at beginners and \n                    those with an advanced understanding of the game may already be familiar with most material.  \n                </p> \n                <p style={{'height': '15px'}}> </p>\n                <p> The course will focus on 6-max No Limit Texas Hold’em, the most popular variant of Poker \n                    played today. We will begin by covering the rules of the game, basic strategic principles, before \n                    diving into the mathematics and heuristics used by strong players. While not the focus of the course, \n                    we will additionally briefly touch on the psychological aspects of poker, including some common \n                    tells and reads found in live play. Specific topics will include (but are not limited to): Position, \n                    Preflop Ranges, Pot Odds, Equity, Bankroll Management, Blocker Effects, Polarization, Exploitative \n                    Adjustments, Tells.\n                </p>\n                <p style={{'height': '15px'}}> </p>\n                <p> Learning poker theory is beneficial for reasons outside of improving at the game. Thinking \n                    about decisions in terms of their expected value while minimizing variance is a valuable skill with \n                    many applications in statistics, mathematics, game theory, economics, investing and finance.\n                </p>\n                <p style={{'height': '15px'}}> </p>\n                <p> Poker skill is highly valued by many financial firms, with relevant material often appearing on \n                    interviews and books on poker theory often finding their way on to the reading list for new hires. \n                    Carnegie Mellon and Facebook have put major effort (and have succeeded) into creating \n                    Superhuman Poker AI due to far reaching applications to other imperfect information systems. \n                    While we will focus solely on poker itself, a strong understanding of poker remains very useful off \n                    the table.\n                </p>\n            </div>\n      </div>\n  );\n}\n\nexport default Landing;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\nimport './index.css';\nimport 'typeface-roboto'\nimport 'typeface-lato'\n\nimport Header from './components/Header';\nimport Landing from './views/landing/Landing';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n    <div>\n        <Router>\n            <Header />\n            <div class=\"background\">\n                <Route exact path=\"/\" component={Landing} />\n            </div>\n        </Router>\n    </div>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n// ReactDOM.render(<Landing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}